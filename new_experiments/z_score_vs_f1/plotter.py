import SatadishaModule_final_trie as phase1
import phase2_Trie as phase2
import datetime
from threading import Thread
import random
import math
from queue  import Queue
import pandas as pd 
import warnings
import numpy as np
import time
import trie as trie
import pickle
import matplotlib.pyplot as plt
import copy
import SVM as svm
import matplotlib.ticker as ticker
import scipy.optimize
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.style
import matplotlib
from matplotlib import rc
import matplotlib.font_manager as fm

fontPath = "/usr/share/fonts/truetype/abyssinica/AbyssinicaSIL-R.ttf"
font_axis = fm.FontProperties(fname=fontPath, size=24)

fontPath = "/usr/share/fonts/truetype/abyssinica/AbyssinicaSIL-R.ttf"
font_legend = fm.FontProperties(fname=fontPath, size=13)

whole_level=[[0.8488160291438979, 0.81340923466160653, 0.78598823830222453, 0.75209272376046366, 0.74555984555984556, 0.7573869988819677, 0.75994384651380453], [0.8488160291438979, 0.8141817030705919, 0.78639038117165527, 0.75241571827356668, 0.74395200309657439, 0.75508569597949715, 0.7577037384639449], [0.8488160291438979, 0.81340923466160653, 0.78598823830222453, 0.75209272376046366, 0.74507531865585153, 0.75698993449432816, 0.75955687314713682], [0.8488160291438979, 0.81340923466160653, 0.78598823830222453, 0.75810580204778155, 0.75067230119093353, 0.76157149673930347, 0.76390183286735003], [0.8488160291438979, 0.81340923466160653, 0.78598823830222453, 0.75209272376046366, 0.74555984555984556, 0.7573869988819677, 0.75994384651380453], [0.8488160291438979, 0.8141817030705919, 0.78639038117165527, 0.75241571827356668, 0.74395200309657439, 0.75508569597949715, 0.7577037384639449], [0.8488160291438979, 0.8141817030705919, 0.78639038117165527, 0.75241571827356668, 0.74395200309657439, 0.75508569597949715, 0.7577037384639449], [0.8488160291438979, 0.81340923466160653, 0.78598823830222453, 0.75209272376046366, 0.74507531865585153, 0.75698993449432816, 0.75955687314713682], [0.8520432127759511, 0.81422399468261886, 0.7699066447007139, 0.73440037114358625, 0.72385379252060011, 0.73477268737932244, 0.73857216230097589], [0.8424591738712777, 0.79972752043596729, 0.74544419134396356, 0.70585389453313985, 0.6893654653990714, 0.70508598609586526, 0.70934379457917263], [0.8167748377433849, 0.77598314606741581, 0.71705882352941175, 0.6763309172706824, 0.66318181818181809, 0.6799249530956849, 0.68289112534309238], [0.7881227981882235, 0.74830900676397294, 0.68742514970059876, 0.65572942958101965, 0.64007336084364963, 0.65693153802389537, 0.66112342941611224], [0.7741935483870968, 0.73916184971098264, 0.67919951485748931, 0.63471502590673579, 0.61702632202987906, 0.63721657544957, 0.64229963830192272], [0.7678018575851392, 0.72627336020520328, 0.66004346476249609, 0.62414698162729665, 0.60260115606936426, 0.62452942341985351, 0.62948668467773061], [0.6741071428571428, 0.65047021943573669, 0.5935653315824031, 0.55018171652222525, 0.53615071283095728, 0.56728177482894471, 0.57361839451391683], [0.6632882882882883, 0.63466878222927414, 0.57920956492859521, 0.54779206260480717, 0.530423620025674, 0.5600669736291336, 0.56625279869733358], [0.6499429874572406, 0.61935483870967734, 0.56266846361185985, 0.52158894645941278, 0.50591638180383913, 0.52456896551724141, 0.53068062827225138], [0.6343713956170703, 0.60497350183448839, 0.55015300918055088, 0.51015670342426012, 0.49429859453725805, 0.50872600349040131, 0.51463725074246924], [0.6322657176749703, 0.61221122112211224, 0.55502063273727642, 0.52420991591765731, 0.50518479127891514, 0.51506487794149991, 0.52053036783575712], [0.6322657176749703, 0.61221122112211224, 0.55509641873278248, 0.52353282975014526, 0.50504514073287321, 0.50990752972258913, 0.51330472103004288], [0.6322657176749703, 0.60050041701417844, 0.54216027874564454, 0.50207468879668049, 0.48371335504885993, 0.49315068493150688, 0.49638870650032835]]

tweets_been_processed_list=[500,1000,1500,2000,2500,3000,3200]
whole_level_transposed=list(map(list, zip(*whole_level)))

fig, ax = plt.subplots()
params = {
   'text.usetex': False,
    'legend.fontsize': 3,
   'figure.figsize': [40, 400]
   }

matplotlib.rcParams.update(params)

markers=['s','d','>','*','x','o','D']
Z_scores=[-1.0,-0.9,-0.8,-0.7,-0.6,-0.5,-0.4,-0.3,-0.2,-0.1,0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0]

whole_levell=[[(0.7539521686258615, -1.0), (0.7599919662582848, -0.9), (0.757148610551752, -0.8), (0.757148610551752, -0.7), (0.758246178600161, -0.6), (0.758246178600161, -0.5), (0.757148610551752, -0.4), (0.7328441950798447, -0.3), (0.7114153234709649, -0.2), (0.7004504504504506, -0.1), (0.6836313617606602, 0), (0.6533583842179427, 0.1), (0.6437275985663082, 0.2), (0.6238306253077303, 0.3), (0.5786802030456853, 0.4), (0.5676297622091536, 0.5), (0.5537828100874935, 0.6), (0.5460679989618479, 0.7), (0.5370467682606411, 0.8), (0.530903328050713, 0.9), (0.5139335476956056, 1.0)], [(0.7477118981297253, -1.0), (0.7537431048069345, -0.9), (0.7562893081761007, -0.8), (0.7503470156652785, -0.7), (0.7537431048069345, -0.6), (0.7537431048069345, -0.5), (0.7518320459496929, -0.4), (0.7537431048069345, -0.3), (0.7107618423924907, -0.2), (0.6942661058224485, -0.1), (0.6731333182946087, 0), (0.6495686640242481, 0.1), (0.6563438872197827, 0.2), (0.6427573358174197, 0.3), (0.6406542056074767, 0.4), (0.5839666584947291, 0.5), (0.5498597296608009, 0.6), (0.5544054531683918, 0.7), (0.5439714504205965, 0.8), (0.5030609528879425, 0.9), (0.5091584815503053, 1.0)], [(0.7484390735146023, -1.0), (0.7484390735146023, -0.9), (0.7472745292368681, -0.8), (0.7484390735146023, -0.7), (0.7484390735146023, -0.6), (0.7484390735146023, -0.5), (0.7484390735146023, -0.4), (0.729081081081081, -0.3), (0.7094774136403897, -0.2), (0.6963562753036436, -0.1), (0.6686594619452748, 0), (0.6380658923915621, 0.1), (0.6304138594802695, 0.2), (0.6183762761302869, 0.3), (0.5631861118202706, 0.4), (0.5581752947206561, 0.5), (0.5547557840616966, 0.6), (0.5325256781669739, 0.7), (0.5198825727248466, 0.8), (0.5113424072591407, 0.9), (0.48713738368910775, 1.0)], [(0.7687348912167606, -1.0), (0.7678031067177727, -0.9), (0.7687348912167606, -0.8), (0.7690480902434198, -0.7), (0.7678031067177727, -0.6), (0.7678031067177727, -0.5), (0.7678031067177727, -0.4), (0.7447770837820373, -0.3), (0.7277140335392762, -0.2), (0.7164312934319658, -0.1), (0.6972477064220183, 0), (0.6565320665083134, 0.1), (0.6405385910074536, 0.2), (0.6300437530384055, 0.3), (0.6076519129782446, 0.4), (0.5617685305591678, 0.5), (0.5537817325307511, 0.6), (0.5371398361089083, 0.7), (0.5338645418326693, 0.8), (0.5277481323372465, 0.9), (0.5144243731464007, 1.0)], [(0.76, -1.0), (0.76, -0.9), (0.76, -0.8), (0.76, -0.7), (0.76, -0.6), (0.76, -0.5), (0.7563946406820948, -0.4), (0.7373211963589077, -0.3), (0.7237630352784558, -0.2), (0.7037457434733257, -0.1), (0.6747380675203725, 0), (0.6540553322298416, 0.1), (0.64872588711598, 0.2), (0.6272305059887557, 0.3), (0.6238666993383974, 0.4), (0.6083518655794415, 0.5), (0.5943230344134639, 0.6), (0.5905194150277358, 0.7), (0.5804480651731161, 0.8), (0.5658132919575899, 0.9), (0.5587318087318087, 1.0)]]
partition=[1,2,3,4,5]

for idx,level in enumerate(whole_levell):

    # f1=level
    f1=[]
    for tuple_level in level:
        f1.append(tuple_level[0])
    ax.plot( Z_scores,f1 ,marker=markers[idx] , label=partition[idx],markersize=6,linewidth=1)
    
    major_ticks = np.arange(-1.0, 1.2, 0.2)                                              
    minor_ticks = np.arange(-1.0, 1.2, 0.1)                                               

    ax.set_xticks(major_ticks)                                                       
    ax.set_xticks(minor_ticks, minor=True)                                           
    # ax.set_yticks(major_ticks)                                                       
    # ax.set_yticks(minor_ticks, minor=True)                                           

    # and a corresponding grid                                                       

    ax.grid(which='both')                                                            

    # or if you want differnet settings for the grids:                               
    ax.grid(which='minor', alpha=0.2)                                                
    ax.grid(which='major', alpha=0.5)     
    ax.set_ylim([0.45,0.90])
    ax.set_xlim([-1.1,1.1])
    
    # tick_spacing = 0.1
    # ax.xaxis.set_major_locator(ticker.MultipleLocator(tick_spacing))

    plt.xlabel('Z Score',fontproperties=font_axis)
    plt.ylabel('F1 Score',fontproperties=font_axis)
    plt.grid(True)
    legend=plt.legend(loc="lower left",ncol=1,frameon=False,prop=font_legend,title="Iteration")
    plt.setp(legend.get_title(),fontsize='15')

    plt.tick_params(axis='both', which='major', labelsize=12)
fig.savefig("z-score-VS-f1-score-Mention.pdf",dpi=1200,bbox_inches='tight')

plt.show()