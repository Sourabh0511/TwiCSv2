

import SatadishaModule_final_trie as phase1
import phase2_Trie as phase2
import datetime
from threading import Thread
import random
import math
from queue  import Queue
import pandas as pd 
import warnings
import numpy as np
import time
import trie as trie
import pickle
import matplotlib.pyplot as plt
import copy
import SVM as svm
import matplotlib.ticker as ticker
import scipy.optimize
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.style
import matplotlib
from matplotlib import rc
import matplotlib.font_manager as fm

fontPath = "/usr/share/fonts/truetype/abyssinica/AbyssinicaSIL-R.ttf"
font_axis = fm.FontProperties(fname=fontPath, size=24)

fontPath = "/usr/share/fonts/truetype/abyssinica/AbyssinicaSIL-R.ttf"
font_legend = fm.FontProperties(fname=fontPath, size=13)

whole_level=[[0.633720930232558, 0.58774373259052926, 0.59113300492610832, 0.58018018018018025, 0.57688723205964576, 0.57878787878787874, 0.57290589451913143], [0.6297376093294461, 0.58659217877094971, 0.58823529411764697, 0.57682926829268288, 0.57438794726930309, 0.57986373959121873, 0.57592339261285896], [0.6297376093294461, 0.58741258741258739, 0.58872305140961867, 0.57718120805369122, 0.57331447430457338, 0.57962264150943399, 0.57676630434782616], [0.6297376093294461, 0.58741258741258739, 0.58872305140961867, 0.57718120805369122, 0.57331447430457338, 0.57908644771611928, 0.57630590645271429], [0.633720930232558, 0.58774373259052926, 0.58997534921939188, 0.57916917519566524, 0.57608189855746861, 0.57886792452830182, 0.57309140705237938], [0.6297376093294461, 0.58741258741258739, 0.58872305140961867, 0.57718120805369122, 0.57331447430457338, 0.57908644771611928, 0.57630590645271429], [0.6297376093294461, 0.58659217877094971, 0.59008264462809912, 0.58009708737864085, 0.57599999999999996, 0.58010630220197434, 0.57496561210453923], [0.6297376093294461, 0.58659217877094971, 0.58823529411764697, 0.57682926829268288, 0.57438794726930309, 0.57986373959121873, 0.57586206896551728], [0.4463519313304721, 0.42588726513569936, 0.40251572327044022, 0.41035120147874304, 0.42467718794835013, 0.42030696576151128, 0.43591130340724715], [0.3253588516746412, 0.3248259860788863, 0.29503546099290778, 0.29926238145416229, 0.31492168178070895, 0.322972972972973, 0.34615384615384615], [0.1693121693121693, 0.22772277227722773, 0.21257485029940118, 0.22197558268590456, 0.24697754749568226, 0.26460239268121044, 0.28811369509043927], [0.1497326203208556, 0.19143576826196473, 0.16666666666666666, 0.1763341067285383, 0.19907834101382485, 0.21477532368621474, 0.23897581792318634], [0.11956521739130435, 0.17346938775510204, 0.15576323987538943, 0.15981198589894241, 0.17860465116279073, 0.1941896024464832, 0.22001419446415896], [0.10928961748633878, 0.14987080103359171, 0.13440000000000002, 0.14077669902912621, 0.1562198649951784, 0.16916996047430832, 0.19117647058823531], [0.08839779005524862, 0.12073490813648295, 0.11631663974151858, 0.11793611793611793, 0.1364522417153996, 0.15163607342378291, 0.16880180859080635], [0.07777777777777778, 0.10582010582010581, 0.10406504065040649, 0.11138613861386139, 0.12289395441030726, 0.13736713000817663, 0.15926493108728942], [0.06703910614525138, 0.095744680851063829, 0.094771241830065356, 0.097622027534418024, 0.10989010989010987, 0.12171052631578944, 0.14285714285714288], [0.056179775280898875, 0.080428954423592491, 0.085385878489326758, 0.088050314465408813, 0.1004016064257028, 0.10927152317880794, 0.12116443745082613], [0.04519774011299435, 0.075268817204301078, 0.079077429983525543, 0.08322824716267338, 0.092741935483870969, 0.099833610648918478, 0.11075949367088608], [0.04519774011299435, 0.075268817204301078, 0.076666666666666661, 0.070038910505836577, 0.077324973876698011, 0.080000000000000002, 0.089256198347107421], [0.04519774011299435, 0.062992125984251982, 0.069291338582677178, 0.079041916167664664, 0.087040618955512586, 0.091787439613526575, 0.10422960725075528]]
whole_levell=[[(0.603409933283914, -1.0), (0.603409933283914, -0.9), (0.603409933283914, -0.8), (0.6058032554847842, -0.7), (0.6007434944237918, -0.6), (0.603409933283914, -0.5), (0.603409933283914, -0.4), (0.3773987206823028, -0.3), (0.2811428571428571, -0.2), (0.21454112038140644, -0.1), (0.17423312883435585, 0), (0.13081761006289305, 0.1), (0.11421319796954316, 0.2), (0.09961685823754789, 0.3), (0.08010335917312662, 0.4), (0.07512953367875648, 0.5), (0.06762028608582575, 0.6), (0.07003891050583658, 0.7), (0.05242463958060288, 0.8), (0.04730617608409987, 0.9), (0.04473684210526315, 1.0)], [(0.6058394160583942, -1.0), (0.6057222609909282, -0.9), (0.6058394160583942, -0.8), (0.6048210372534697, -0.7), (0.6048210372534697, -0.6), (0.6057222609909282, -0.5), (0.6048210372534697, -0.4), (0.3689727463312369, -0.3), (0.2636363636363636, -0.2), (0.20803782505910165, -0.1), (0.17809867629362214, 0), (0.1354679802955665, 0.1), (0.11457036114570361, 0.2), (0.10513141426783477, 0.3), (0.09079445145018913, 0.4), (0.07633587786259541, 0.5), (0.07133757961783438, 0.6), (0.05648267008985879, 0.7), (0.05398457583547558, 0.8), (0.05148005148005147, 0.9), (0.04398447606727037, 1.0)], [(0.603882099209202, -1.0), (0.6034482758620688, -0.9), (0.6034482758620688, -0.8), (0.5998558038932948, -0.7), (0.6034482758620688, -0.6), (0.6034482758620688, -0.5), (0.5968208092485549, -0.4), (0.37966804979253116, -0.3), (0.2757847533632287, -0.2), (0.23352601156069364, -0.1), (0.15272727272727274, 0), (0.12776412776412777, 0.1), (0.10460772104607721, 0.2), (0.09022556390977444, 0.3), (0.08070617906683482, 0.4), (0.07828282828282829, 0.5), (0.06844106463878327, 0.6), (0.06114649681528662, 0.7), (0.05121638924455826, 0.8), (0.04871794871794871, 0.9), (0.04621309370988447, 1.0)], [(0.590941768511862, -1.0), (0.5981441827266238, -0.9), (0.5981441827266238, -0.8), (0.5981441827266238, -0.7), (0.5981441827266238, -0.6), (0.5981441827266238, -0.5), (0.590941768511862, -0.4), (0.5991440798858773, -0.3), (0.2685904550499445, -0.2), (0.2085747392815759, -0.1), (0.15751789976133654, 0), (0.12180267965895251, 0.1), (0.10565110565110565, 0.2), (0.0962962962962963, 0.3), (0.08208955223880597, 0.4), (0.0725, 0.5), (0.06766917293233082, 0.6), (0.05548549810844893, 0.7), (0.04810126582278481, 0.8), (0.04810126582278481, 0.9), (0.043147208121827416, 1.0)], [(0.5837037037037036, -1.0), (0.5853658536585366, -0.9), (0.5837037037037036, -0.8), (0.5843195266272189, -0.7), (0.5864106351550961, -0.6), (0.5853658536585366, -0.5), (0.5853658536585366, -0.4), (0.3704496788008565, -0.3), (0.2572421784472769, -0.2), (0.19588875453446195, -0.1), (0.16502463054187194, 0), (0.1283018867924528, 0.1), (0.12121212121212122, 0.2), (0.11167512690355332, 0.3), (0.08247422680412372, 0.4), (0.07999999999999999, 0.5), (0.07003891050583658, 0.6), (0.0625, 0.7), (0.059973924380704036, 0.8), (0.057441253263707574, 0.9), (0.057441253263707574, 1.0)]]

tweets_been_processed_list=[500,1000,1500,2000,2500,3000,3200]
whole_level_transposed=list(map(list, zip(*whole_level)))

fig, ax = plt.subplots()
params = {
   'text.usetex': False,
    'legend.fontsize': 3,
   'figure.figsize': [40, 400]
   }

matplotlib.rcParams.update(params)

markers=['x','d','>','s','*','o','D']
Z_scores=[-1.0,-0.9,-0.8,-0.7,-0.6,-0.5,-0.4,-0.3,-0.2,-0.1,0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0]
partition=[1,2,3,4,5]

for idx,level in enumerate(whole_levell):

    # f1=level
    f1=[]
    for tuple_level in level:
        f1.append(tuple_level[0])
    ax.plot( Z_scores,f1 ,marker=markers[idx] , label=partition[idx],markersize=7,linewidth=1)
    
    major_ticks = np.arange(-1.0, 1.2, 0.2)                                              
    minor_ticks = np.arange(-1.0, 1.2, 0.1)                                               

    ax.set_xticks(major_ticks)                                                       
    ax.set_xticks(minor_ticks, minor=True)                                           
    # ax.set_yticks(major_ticks)                                                       
    # ax.set_yticks(minor_ticks, minor=True)                                           

    # and a corresponding grid                                                       

    ax.grid(which='both')                                                            

    # or if you want differnet settings for the grids:                               
    ax.grid(which='minor', alpha=0.2)                                                
    ax.grid(which='major', alpha=0.5)     
    ax.set_ylim([0,0.70])
    ax.set_xlim([-1.1,1.1])
    # tick_spacing = 0.1
    # ax.xaxis.set_major_locator(ticker.MultipleLocator(tick_spacing))

    plt.xlabel('Z Score',fontproperties=font_axis)
    plt.ylabel('F1 Score',fontproperties=font_axis)
    plt.grid(True)
    legend=plt.legend(loc="lower left",ncol=1,frameon=False,prop=font_legend,title="Iteration")
    plt.setp(legend.get_title(),fontsize='15')


    plt.tick_params(axis='both', which='major', labelsize=12)
fig.savefig("z-score-VS-f1-score-Entity.pdf",dpi=1200,bbox_inches='tight')

plt.show()
